// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header tests matches the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <NavLink
        activeClassName="active"
        ariaCurrent="true"
        to="/plotme/index"
>
        <h1>
                plot
                <span
                        className="header-span"
                >
                        me
                </span>
        </h1>
</NavLink>,
      "className": "Header",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "activeClassName": "active",
        "ariaCurrent": "true",
        "children": <h1>
          plot
          <span
                    className="header-span"
          >
                    me
          </span>
</h1>,
        "to": "/plotme/index",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "plot",
            <span
              className="header-span"
>
              me
</span>,
          ],
        },
        "ref": null,
        "rendered": Array [
          "plot",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "me",
              "className": "header-span",
            },
            "ref": null,
            "rendered": "me",
            "type": "span",
          },
        ],
        "type": "h1",
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <NavLink
          activeClassName="active"
          ariaCurrent="true"
          to="/plotme/index"
>
          <h1>
                    plot
                    <span
                              className="header-span"
                    >
                              me
                    </span>
          </h1>
</NavLink>,
        "className": "Header",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeClassName": "active",
          "ariaCurrent": "true",
          "children": <h1>
            plot
            <span
                        className="header-span"
            >
                        me
            </span>
</h1>,
          "to": "/plotme/index",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "plot",
              <span
                className="header-span"
>
                me
</span>,
            ],
          },
          "ref": null,
          "rendered": Array [
            "plot",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "me",
                "className": "header-span",
              },
              "ref": null,
              "rendered": "me",
              "type": "span",
            },
          ],
          "type": "h1",
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
